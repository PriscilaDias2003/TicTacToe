[{"C:\\Users\\prisc\\Desktop\\Projetos\\Cursos\\Curso React\\fundamentos-react\\src\\index.js":"1","C:\\Users\\prisc\\Desktop\\Projetos\\Cursos\\Curso React\\fundamentos-react\\src\\App.js":"2"},{"size":190,"mtime":1608576271753,"results":"3","hashOfConfig":"4"},{"size":4233,"mtime":1608587164281,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mb0qil",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"C:\\Users\\prisc\\Desktop\\Projetos\\Cursos\\Curso React\\fundamentos-react\\src\\index.js",[],"C:\\Users\\prisc\\Desktop\\Projetos\\Cursos\\Curso React\\fundamentos-react\\src\\App.js",["11"],"import React, { useState, useEffect } from 'react';\r\nimport './index.css';\r\n\r\n\r\nfunction App() {\r\n    const emptyBoard = Array(9).fill(\"\");\r\n    const [board, setBoard] = useState(emptyBoard);\r\n    const [currentPlayer, setCurrentPlayer] = useState(\"X\");\r\n    const [winner, setWinner] = useState(null);\r\n\r\n    const handleCellClick = (index) => {\r\n        if(winner){\r\n            console.log(\"Jogo acabou!\");\r\n            return null\r\n        }\r\n\r\n        if(board[index] !== \"\"){\r\n            console.log(\"Posição ocupada\");\r\n            return null\r\n        }\r\n\r\n        setBoard(\r\n            board.map(\r\n                (item, itemIndex) => \r\n                itemIndex === index ? currentPlayer : item\r\n            )\r\n        );\r\n\r\n        setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\r\n    }\r\n\r\n    const checkWinner = () => {\r\n        const possibleWaysToWin = [\r\n            [board[0], board[1], board[2]],\r\n            [board[3], board[4], board[5]],\r\n            [board[6], board[7], board[8]],\r\n\r\n            [board[0], board[3], board[6]],\r\n            [board[1], board[4], board[7]],\r\n            [board[2], board[5], board[8]],\r\n\r\n            [board[0], board[4], board[8]],\r\n            [board[2], board[4], board[6]]\r\n        ];\r\n\r\n        possibleWaysToWin.forEach(cells => {\r\n            if(cells.every(cell => cell === \"O\")){\r\n                setWinner(\"O\");\r\n                console.log(\"O jogador O ganhou\");\r\n            }\r\n            if(cells.every(cell => cell === \"X\")){\r\n                setWinner(\"X\");\r\n                console.log(\"O jogador X ganhou\");\r\n            }\r\n        });\r\n\r\n        checkDraw();\r\n    }\r\n\r\n    const checkDraw = () => {\r\n        if(board.every(item => item !== \"\")){\r\n            setWinner(\"E\");\r\n        }\r\n    }\r\n\r\n    const handleReset = () => {\r\n        setCurrentPlayer(\"O\");\r\n        setBoard(emptyBoard);\r\n        setWinner(null);\r\n    }\r\n\r\n    useEffect(checkWinner, [board]);\r\n\r\n    return (\r\n        <main>\r\n            <h1 className=\"title\">Jogo da Velha!</h1>\r\n\r\n            <div className={`board ${winner ? \"game-over\" : \"\"}`}>\r\n                {/*Repetição de uma div com o tamanho da variável board*/}\r\n\r\n                {board.map((item, index) => (\r\n                    <div\r\n                     key = {index}\r\n                     className = {`cell ${item}`}\r\n                     onClick = {() => handleCellClick(index)}\r\n                    >\r\n\r\n                        {item}\r\n\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            \r\n            {winner &&\r\n           \r\n                <div className = \"modal-container\">\r\n                    {winner === \"E\" \r\n                    \r\n                    ? \r\n                       \r\n                       <div className=\"modal\">\r\n                           <div >\r\n                                <h2 className=\"winner-message\">\r\n                                    <span className={winner}>Empate!</span> \r\n                                </h2>\r\n                                <p>Nenhum dos dois jogadores venceram, para jogar novamente clique no botão recomeçar, se divirta! </p>\r\n                                <button className = \"btn\" onClick = {() => handleReset()}>Recomeçar</button>\r\n                           </div>\r\n                           \r\n                        </div>\r\n              \r\n                    \r\n                    : \r\n\r\n                        <div className=\"modal\">\r\n                            <div >\r\n                                <h2 className=\"winner-message\">\r\n                                    <span className={winner}>{winner}</span> Ganhou o Jogo!\r\n                                </h2>\r\n                                <p>Parabéns ao jogador vencedor, para jogar novamente clique no botão recomeçar, se divirta! </p>\r\n                                <button className = \"btn\" onClick = {() => handleReset()}>Recomeçar</button>\r\n                            </div>\r\n                        </div>\r\n                   \r\n                \r\n                    }\r\n                    \r\n                    \r\n                </div>\r\n            }\r\n           \r\n        </main>\r\n    );\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"12","severity":1,"message":"13","line":72,"column":28,"nodeType":"14","endLine":72,"endColumn":35,"suggestions":"15"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkDraw'. Either include it or remove the dependency array.","ArrayExpression",["16"],{"desc":"17","fix":"18"},"Update the dependencies array to be: [board, checkDraw]",{"range":"19","text":"20"},[1937,1944],"[board, checkDraw]"]